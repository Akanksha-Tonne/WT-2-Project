{"ast":null,"code":"var _jsxFileName = \"D:\\\\frontend\\\\frontend\\\\src\\\\components\\\\forecast.jsx\";\nimport React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport axios from \"axios\";\nimport Logo from \"./logo2.JPG\";\nimport MainTemplate from \"./mainTemplate\";\nimport Graph from \"./graph\";\nimport ForecastVal from \"./forecastval\";\nimport { LineChart, PieChart } from 'react-chartkick';\nimport 'chart.js';\n\nclass Forecast extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: {},\n      graph_data: {\n        \"6mm\": {},\n        \"dust\": {},\n        \"10mm\": {},\n        \"20mm\": {},\n        \"30mm\": {}\n      }\n    };\n    this.avg_data = {};\n    this.date_quant_cat = {\n      \"6mm\": {},\n      \"dust\": {},\n      \"10mm\": {},\n      \"20mm\": {},\n      \"30mm\": {}\n    };\n\n    this.getData = event => {\n      axios.get(\"http://localhost:8000/sales/\").then(response => {\n        this.avg_data = {};\n        this.date_quant_cat = {\n          \"6mm\": {},\n          \"dust\": {},\n          \"10mm\": {},\n          \"20mm\": {},\n          \"30mm\": {}\n        };\n\n        for (var i = 0; i < response.data.length; i++) {\n          var date = response.data[i].sale_date.split(\"T\")[0];\n\n          if (!(date in this.date_quant_cat[response.data[i].stone_type.st])) {\n            this.date_quant_cat[response.data[i].stone_type.st][date] = response.data[i].quantity;\n          } else {\n            this.date_quant_cat[response.data[i].stone_type.st][response.data[i].sale_date] += response.data[i].quantity;\n          }\n\n          if (!(response.data[i].sale_date in this.avg_data)) {\n            this.avg_data[response.data[i].sale_date] = {\n              \"6mm\": 0,\n              \"dust\": 0,\n              \"10mm\": 0,\n              \"20mm\": 0,\n              \"30mm\": 0\n            };\n            this.avg_data[response.data[i].sale_date][response.data[i].stone_type.st] = response.data[i].quantity;\n          } else {\n            this.avg_data[response.data[i].sale_date][response.data[i].stone_type.st] += response.data[i].quantity;\n          }\n        }\n\n        this.setState({\n          data: this.avg_data,\n          graph_data: this.date_quant_cat\n        }); // console.log(this.state.data)\n        // console.log(this.date_quant_cat)\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n    setInterval(this.getData, 5000);\n  }\n\n  componentWillMount() {\n    this.getData();\n  }\n\n  render() {\n    // console.log(this.state);\n    var data = [{\n      \"name\": \"6mm\",\n      \"data\": this.state.graph_data[\"6mm\"]\n    }, {\n      \"name\": \"dust\",\n      \"data\": this.state.graph_data[\"dust\"]\n    }, {\n      \"name\": \"10mm\",\n      \"data\": this.state.graph_data[\"10mm\"]\n    }, {\n      \"name\": \"20mm\",\n      \"data\": this.state.graph_data[\"20mm\"]\n    }, {\n      \"name\": \"30mm\",\n      \"data\": this.state.graph_data[\"30mm\"]\n    }];\n    console.log(data);\n    return /*#__PURE__*/React.createElement(MainTemplate, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(LineChart, {\n      data: data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(ForecastVal, {\n      data: this.state.data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default Forecast;","map":{"version":3,"sources":["D:/frontend/frontend/src/components/forecast.jsx"],"names":["React","Component","axios","Logo","MainTemplate","Graph","ForecastVal","LineChart","PieChart","Forecast","state","data","graph_data","avg_data","date_quant_cat","getData","event","get","then","response","i","length","date","sale_date","split","stone_type","st","quantity","setState","catch","error","console","log","componentDidMount","setInterval","componentWillMount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,kCAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,iBAApC;AACA,OAAO,UAAP;;AAEA,MAAMC,QAAN,SAAuBR,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAE7BS,KAF6B,GAErB;AACJC,MAAAA,IAAI,EAAC,EADD;AAEJC,MAAAA,UAAU,EAAC;AAAC,eAAM,EAAP;AAAU,gBAAO,EAAjB;AAAoB,gBAAO,EAA3B;AAA8B,gBAAO,EAArC;AAAwC,gBAAO;AAA/C;AAFP,KAFqB;AAAA,SAQ7BC,QAR6B,GAQlB,EARkB;AAAA,SAS7BC,cAT6B,GASZ;AAAC,aAAM,EAAP;AAAU,cAAO,EAAjB;AAAoB,cAAO,EAA3B;AAA8B,cAAO,EAArC;AAAwC,cAAO;AAA/C,KATY;;AAAA,SAW7BC,OAX6B,GAWlBC,KAAD,IAAW;AACjBd,MAAAA,KAAK,CAACe,GAAN,CAAU,8BAAV,EAA0CC,IAA1C,CAAgDC,QAAD,IAAc;AACjD,aAAKN,QAAL,GAAgB,EAAhB;AACA,aAAKC,cAAL,GAAsB;AAAC,iBAAM,EAAP;AAAU,kBAAO,EAAjB;AAAoB,kBAAO,EAA3B;AAA8B,kBAAO,EAArC;AAAwC,kBAAO;AAA/C,SAAtB;;AAEA,aAAI,IAAIM,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGD,QAAQ,CAACR,IAAT,CAAcU,MAAjC,EAAyCD,CAAC,EAA1C,EAA6C;AACzC,cAAIE,IAAI,GAAGH,QAAQ,CAACR,IAAT,CAAcS,CAAd,EAAiBG,SAAjB,CAA2BC,KAA3B,CAAiC,GAAjC,EAAsC,CAAtC,CAAX;;AACA,cAAG,EAAEF,IAAI,IAAI,KAAKR,cAAL,CAAoBK,QAAQ,CAACR,IAAT,CAAcS,CAAd,EAAiBK,UAAjB,CAA4BC,EAAhD,CAAV,CAAH,EAAmE;AAC/D,iBAAKZ,cAAL,CAAoBK,QAAQ,CAACR,IAAT,CAAcS,CAAd,EAAiBK,UAAjB,CAA4BC,EAAhD,EAAoDJ,IAApD,IAA4DH,QAAQ,CAACR,IAAT,CAAcS,CAAd,EAAiBO,QAA7E;AACH,WAFD,MAGI;AACA,iBAAKb,cAAL,CAAoBK,QAAQ,CAACR,IAAT,CAAcS,CAAd,EAAiBK,UAAjB,CAA4BC,EAAhD,EAAoDP,QAAQ,CAACR,IAAT,CAAcS,CAAd,EAAiBG,SAArE,KAAmFJ,QAAQ,CAACR,IAAT,CAAcS,CAAd,EAAiBO,QAApG;AACH;;AACD,cAAI,EAAER,QAAQ,CAACR,IAAT,CAAcS,CAAd,EAAiBG,SAAjB,IAA8B,KAAKV,QAArC,CAAJ,EACA;AACI,iBAAKA,QAAL,CAAcM,QAAQ,CAACR,IAAT,CAAcS,CAAd,EAAiBG,SAA/B,IAA4C;AAAC,qBAAM,CAAP;AAAS,sBAAO,CAAhB;AAAkB,sBAAO,CAAzB;AAA2B,sBAAO,CAAlC;AAAoC,sBAAO;AAA3C,aAA5C;AACA,iBAAKV,QAAL,CAAcM,QAAQ,CAACR,IAAT,CAAcS,CAAd,EAAiBG,SAA/B,EAA0CJ,QAAQ,CAACR,IAAT,CAAcS,CAAd,EAAiBK,UAAjB,CAA4BC,EAAtE,IAA0EP,QAAQ,CAACR,IAAT,CAAcS,CAAd,EAAiBO,QAA3F;AACH,WAJD,MAKI;AACA,iBAAKd,QAAL,CAAcM,QAAQ,CAACR,IAAT,CAAcS,CAAd,EAAiBG,SAA/B,EAA0CJ,QAAQ,CAACR,IAAT,CAAcS,CAAd,EAAiBK,UAAjB,CAA4BC,EAAtE,KAA6EP,QAAQ,CAACR,IAAT,CAAcS,CAAd,EAAiBO,QAA9F;AACH;AACJ;;AACD,aAAKC,QAAL,CAAc;AAACjB,UAAAA,IAAI,EAAC,KAAKE,QAAX;AAAoBD,UAAAA,UAAU,EAAC,KAAKE;AAApC,SAAd,EArBiD,CAsBjD;AACA;AACD,OAxBX,EAyBWe,KAzBX,CAyBkBC,KAAD,IAAW;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,OA3BX;AA4BD,KAxC0B;AAAA;;AAyC3BG,EAAAA,iBAAiB,GAAE;AACjB,SAAKlB,OAAL;AACAmB,IAAAA,WAAW,CAAC,KAAKnB,OAAN,EAAe,IAAf,CAAX;AACD;;AACDoB,EAAAA,kBAAkB,GAAE;AAEhB,SAAKpB,OAAL;AACH;;AAEHqB,EAAAA,MAAM,GAAG;AACL;AACD,QAAIzB,IAAI,GAAG,CACN;AAAC,cAAO,KAAR;AAAe,cAAQ,KAAKD,KAAL,CAAWE,UAAX,CAAsB,KAAtB;AAAvB,KADM,EAEN;AAAC,cAAO,MAAR;AAAgB,cAAQ,KAAKF,KAAL,CAAWE,UAAX,CAAsB,MAAtB;AAAxB,KAFM,EAGN;AAAC,cAAO,MAAR;AAAgB,cAAQ,KAAKF,KAAL,CAAWE,UAAX,CAAsB,MAAtB;AAAxB,KAHM,EAIN;AAAC,cAAO,MAAR;AAAgB,cAAQ,KAAKF,KAAL,CAAWE,UAAX,CAAsB,MAAtB;AAAxB,KAJM,EAKN;AAAC,cAAO,MAAR;AAAgB,cAAQ,KAAKF,KAAL,CAAWE,UAAX,CAAsB,MAAtB;AAAxB,KALM,CAAX;AAOGmB,IAAAA,OAAO,CAACC,GAAR,CAAYrB,IAAZ;AACF,wBACI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAEA,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,eAII,oBAAC,WAAD;AAAa,MAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CADJ;AAQH;;AApE4B;;AAsEjC,eAAeF,QAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport axios from \"axios\";\r\nimport Logo from \"./logo2.JPG\";\r\nimport MainTemplate from \"./mainTemplate\";\r\nimport Graph from \"./graph\"\r\nimport ForecastVal from \"./forecastval\"\r\nimport { LineChart, PieChart } from 'react-chartkick'\r\nimport 'chart.js'\r\n\r\nclass Forecast extends Component {\r\n    \r\n    state = {\r\n        data:{},\r\n        graph_data:{\"6mm\":{},\"dust\":{},\"10mm\":{},\"20mm\":{},\"30mm\":{}}\r\n    }\r\n\r\n\r\n    avg_data = {}\r\n    date_quant_cat = {\"6mm\":{},\"dust\":{},\"10mm\":{},\"20mm\":{},\"30mm\":{}}\r\n\r\n    getData = (event) => {\r\n        axios.get(\"http://localhost:8000/sales/\").then((response) => {\r\n                    this.avg_data = {}\r\n                    this.date_quant_cat = {\"6mm\":{},\"dust\":{},\"10mm\":{},\"20mm\":{},\"30mm\":{}}\r\n\r\n                    for(var i = 0; i < response.data.length; i++){\r\n                        var date = response.data[i].sale_date.split(\"T\")[0]\r\n                        if(!(date in this.date_quant_cat[response.data[i].stone_type.st] )){\r\n                            this.date_quant_cat[response.data[i].stone_type.st][date] = response.data[i].quantity;\r\n                        }\r\n                        else{\r\n                            this.date_quant_cat[response.data[i].stone_type.st][response.data[i].sale_date] += response.data[i].quantity;\r\n                        }\r\n                        if (!(response.data[i].sale_date in this.avg_data))\r\n                        {\r\n                            this.avg_data[response.data[i].sale_date] = {\"6mm\":0,\"dust\":0,\"10mm\":0,\"20mm\":0,\"30mm\":0}\r\n                            this.avg_data[response.data[i].sale_date][response.data[i].stone_type.st]=response.data[i].quantity;\r\n                        }\r\n                        else{\r\n                            this.avg_data[response.data[i].sale_date][response.data[i].stone_type.st] += response.data[i].quantity;\r\n                        }\r\n                    }\r\n                    this.setState({data:this.avg_data,graph_data:this.date_quant_cat})\r\n                    // console.log(this.state.data)\r\n                    // console.log(this.date_quant_cat)\r\n                  })\r\n                  .catch((error) => {\r\n                    console.log(error);\r\n                  })\r\n      }\r\n      componentDidMount(){\r\n        this.getData();\r\n        setInterval(this.getData, 5000);\r\n      }\r\n      componentWillMount(){\r\n          \r\n          this.getData();\r\n      }\r\n\r\n    render() {\r\n        // console.log(this.state);\r\n       var data = [\r\n            {\"name\":\"6mm\", \"data\": this.state.graph_data[\"6mm\"]},\r\n            {\"name\":\"dust\", \"data\": this.state.graph_data[\"dust\"]},\r\n            {\"name\":\"10mm\", \"data\": this.state.graph_data[\"10mm\"]},\r\n            {\"name\":\"20mm\", \"data\": this.state.graph_data[\"20mm\"]},\r\n            {\"name\":\"30mm\", \"data\": this.state.graph_data[\"30mm\"]}\r\n          ];\r\n          console.log(data)\r\n        return(\r\n            <MainTemplate>\r\n                {/* <Graph data={this.state.data}/> */} \r\n                <LineChart data={data} />\r\n                <br/>\r\n                <ForecastVal data={this.state.data}/>\r\n            </MainTemplate>        \r\n            )\r\n    }\r\n}\r\nexport default Forecast;"]},"metadata":{},"sourceType":"module"}